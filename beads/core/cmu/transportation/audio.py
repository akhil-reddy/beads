import numpy as np


###############################################################################
# Neural Transducer
###############################################################################
class NeuralTransducer:
    def __init__(self, membrane_time_constant=0.005, threshold=0.5, reset_potential=0.0):
        """
        A simple integrate-and-fire model that converts the ribbon synapse release rate
        into a spike train.

        Args:
            membrane_time_constant (float): Integration time constant (s).
            threshold (float): Voltage threshold for spike generation.
            reset_potential (float): Membrane potential to reset to after a spike.

        Research Basis:
            - Basic integrate-and-fire models are widely used in auditory neuroscience to model
              temporal encoding (see, e.g., Joris et al., 2004).
        """
        self.tau = membrane_time_constant
        self.threshold = threshold
        self.reset_potential = reset_potential
        self.V = 0.0
        self.spike_train = []

    def update(self, release_rate, dt):
        """
        Update the membrane potential based on the release rate and generate spikes if the threshold is exceeded.

        Args:
            release_rate (float): Input from the ribbon synapse (vesicles/s, scaled).
            dt (float): Time step (s).

        Returns:
            int: 1 if a spike is generated in this time step, else 0.
        """
        # Simple Euler integration.
        dV = (-self.V + release_rate) * (dt / self.tau)
        self.V += dV
        if self.V >= self.threshold:
            spike = 1
            self.V = self.reset_potential  # reset after spiking
        else:
            spike = 0
        self.spike_train.append(spike)
        return spike


###############################################################################
# Spiral Ganglion Neuron (SGN)
###############################################################################


class SpiralGanglionNeuron:
    def __init__(self, refractory_period=0.001):
        """
        Models a spiral ganglion neuron that transmits auditory information from the cochlea to the brain.

        Args:
            refractory_period (float): Minimal time (s) between spikes.

        Research Basis:
            - Liberman (1991); Spoendlin (1984): Characterize the electrophysiological properties of SGNs.
        """
        self.refractory_period = refractory_period
        self.last_spike_time = -np.inf
        self.spike_times = []  # Record spike times

    def transmit(self, spike, current_time):
        """
        If a spike is generated by the neural transducer and the refractory period has elapsed,
        record the spike time.

        Args:
            spike (int): 1 if a spike occurred, else 0.
            current_time (float): Current simulation time (s).

        Returns:
            int: 1 if the spike is transmitted, else 0.
        """
        if spike and (current_time - self.last_spike_time) >= self.refractory_period:
            self.spike_times.append(current_time)
            self.last_spike_time = current_time
            return 1
        return 0
